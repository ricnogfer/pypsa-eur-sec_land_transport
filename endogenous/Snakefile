from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider


configfile: "config.yaml"


wildcard_constraints:
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+m?"


rule all:
    input:
        expand("results/generators_profile{simpl}_{planning_horizons}.png", **config['scenario']),
	expand('results/elec_s{simpl}_{planning_horizons}.nc',**config['scenario']),
	"results/generators.png",
	"results/vehiclenb.png",
	expand('results/EV_balance{simpl}_{planning_horizons}.png',**config['scenario']),
	expand('results/EV_soc_1year{simpl}_{planning_horizons}.png',**config['scenario']),
	expand('results/EV_soc_1day{simpl}_{planning_horizons}.png',**config['scenario']),
	expand('results/transport_balance_1year{simpl}_{planning_horizons}.png',**config['scenario']),
	expand('results/transport_balance_period{simpl}_{planning_horizons}.png',**config['scenario']),
	expand('results/transport_balance_and_load{simpl}_{planning_horizons}.png',**config['scenario']),
	"scripts/pypsatopo.py",
	expand("results/elec_s{simpl}_{planning_horizons}.svg", **config["scenario"]),
	
rule plots_together:
    input:    	
        expand('results/elec_s{simpl}_{planning_horizons}.nc',**config['scenario'])
    output:
        result = "results/generators.png",
        vehiclenb = "results/vehiclenb.png",
    script: "scripts/make_plots_summary.py" 
        
rule plots_individual:
    input:
        network = 'results/elec_s{simpl}_{planning_horizons}.nc',
    output:
        EV_balance = 'results/EV_balance{simpl}_{planning_horizons}.png',
        EV_soc_1year = 'results/EV_soc_1year{simpl}_{planning_horizons}.png',
        EV_soc_1day = 'results/EV_soc_1day{simpl}_{planning_horizons}.png',
        transport_balance_1year = 'results/transport_balance_1year{simpl}_{planning_horizons}.png',
        transport_balance_period = 'results/transport_balance_period{simpl}_{planning_horizons}.png',
        transport_balance_and_load = 'results/transport_balance_and_load{simpl}_{planning_horizons}.png',
    script: "scripts/make_plots.py" 

rule transport:
    input:
    	dsm_profile = 'resources/dsm_profile_s_45.csv',
        transport_demand = expand("resources/transport_demand_s{simpl}_{clusters}.csv", **config['scenario']),
        co2_totals_name="resources/co2_totals.csv",
    output:
    	results = "results/generators_profile{simpl}_{planning_horizons}.png",
	network = 'results/elec_s{simpl}_{planning_horizons}.nc'
    script: "scripts/end_transport.py"


# rule to download the tool PyPSATopo
rule retrieve_topo:
    input:
        HTTPRemoteProvider().remote("https://raw.githubusercontent.com/ricnogfer/pypsatopo/v0.5.0/pypsatopo.py", keep_local = True)
    output:
        "scripts/pypsatopo.py"
    run:
        shell("mv {input} scripts/pypsatopo.py")
        shell("chmod u+x scripts/pypsatopo.py")


# rule to generate the topographical representation of a network through PyPSATopo
rule generate_topo:
    input:
        network = expand("results/elec_s{simpl}_{planning_horizons}.nc", **config["scenario"])
    output:
        expand("results/elec_s{simpl}_{planning_horizons}.svg", **config["scenario"])
    shell:
        "scripts/pypsatopo.py -cc -nb -nq {input.network}"


